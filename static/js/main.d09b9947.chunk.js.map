{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","id","email","className","alt","src","CardList","robots","cardComponents","map","robo","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","event","setState","searchField","target","value","state","fetch","then","res","json","user","filtered","this","filter","toLowerCase","includes","length","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCFSC,EAdF,SAACC,GAAW,IAChBC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,GAAGC,EAASH,EAATG,MACf,OACE,yBAAKC,UAAU,8DACb,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BJ,EAA1B,cACpB,6BACE,4BAAKD,GACL,2BAAIE,MCQGI,EAdE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAiBD,EAAOE,KAAI,SAACC,EAAMC,GACxC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EACjBV,GAAIM,EAAOI,GAAGV,GACdC,MAAOK,EAAOI,GAAGT,MACjBF,KAAMO,EAAOI,GAAGX,UAElB,OACC,yBAAKG,UAAU,6CACZK,ICEUK,EAZG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,aACpB,OACC,yBAAKX,UAAU,OACd,2BAAOY,KAAK,SACXC,YAAY,gBACZb,UAAU,mCACVc,SAAUH,MCECI,EARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,UAAY,SAASC,OAAO,kBAAmBC,OAAO,UAC9DvB,EAAMwB,WC4CJC,E,kDA1Cd,aAAe,IAAD,8BACb,gBAcDV,aAAe,SAACW,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd1C,EAAKC,MAAQ,CACZH,YAAa,IACbpB,OAAQ,IAJI,E,gEAQO,IAAD,OACnBwB,MAAM,8CACJC,MAAK,SAAAC,GAAS,OAAOA,EAAIC,UACzBF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAAEnB,OAAQ4B,S,+BAQ9B,IAAD,OACFC,EAAWC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAC/B,GAC1C,OAAOA,EAAOP,KAAKuC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAGlE,OAAiC,IAA7BF,KAAKP,MAAMvB,OAAOkC,OACd,wBAAItC,UAAU,MAAd,cAGN,yBAAKA,UAAU,OACd,wBAAIA,UAAU,OAAd,eACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKvB,eAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUP,OAAQ6B,U,GAjCNM,IAAMC,W,MCExBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d09b9947.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nconst Card = (props) => {\r\n  const {name,id,email} = props;\r\n  return (\r\n    <div className=\"bg-light-blue dib br3 pa3 ma2 bw2 grow shadow-5 tc georgia\">\r\n      <img alt=\"photo\" src={`https://robohash.org/${id}?200*200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardComponents = robots.map((robo, i) => {\r\n\t\treturn <Card key={i}\r\n\t\t\tid={robots[i].id}\r\n\t\t\temail={robots[i].email}\r\n\t\t\tname={robots[i].name} />\r\n\t})\r\n\treturn (\r\n\t\t<div className=\"flex justify-center align-items flex-wrap\" >\r\n\t\t\t{ cardComponents}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input type=\"search\"\r\n\t\t\t\tplaceholder=\"search robots\"\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t\tonChange={searchChange} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY : 'scroll',border:'1px solid black', height:'534px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nclass App extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tsearchField: ' ',\r\n\t\t\trobots: []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(res => { return res.json() })\r\n\t\t\t.then(user => this.setState({ robots: user }))\r\n\r\n\t}\r\n\r\n\tsearchChange = (event) => {\r\n\t\tthis.setState({ searchField: event.target.value });\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst filtered = this.state.robots.filter((robots) => {\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n\t\t});\r\n\r\n\t\tif (this.state.robots.length === 0) {\r\n\t\t\treturn <h1 className=\"tc\">LOADING...</h1>\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\" tc\">\r\n\t\t\t\t\t<h1 className=\" f2\">RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.searchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filtered} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport './containers/App.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}